// Generated by gencpp from file binpacking/LabelPoint.msg
// DO NOT EDIT!


#ifndef BINPACKING_MESSAGE_LABELPOINT_H
#define BINPACKING_MESSAGE_LABELPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace binpacking
{
template <class ContainerAllocator>
struct LabelPoint_
{
  typedef LabelPoint_<ContainerAllocator> Type;

  LabelPoint_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , entityName()  {
    }
  LabelPoint_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , entityName(_alloc)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _entityName_type;
  _entityName_type entityName;





  typedef boost::shared_ptr< ::binpacking::LabelPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::binpacking::LabelPoint_<ContainerAllocator> const> ConstPtr;

}; // struct LabelPoint_

typedef ::binpacking::LabelPoint_<std::allocator<void> > LabelPoint;

typedef boost::shared_ptr< ::binpacking::LabelPoint > LabelPointPtr;
typedef boost::shared_ptr< ::binpacking::LabelPoint const> LabelPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::binpacking::LabelPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::binpacking::LabelPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::binpacking::LabelPoint_<ContainerAllocator1> & lhs, const ::binpacking::LabelPoint_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.entityName == rhs.entityName;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::binpacking::LabelPoint_<ContainerAllocator1> & lhs, const ::binpacking::LabelPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace binpacking

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::binpacking::LabelPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::binpacking::LabelPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::binpacking::LabelPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::binpacking::LabelPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::binpacking::LabelPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::binpacking::LabelPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::binpacking::LabelPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb95b748ab6551f3b8cd89d3a8c541fc";
  }

  static const char* value(const ::binpacking::LabelPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb95b748ab6551f3ULL;
  static const uint64_t static_value2 = 0xb8cd89d3a8c541fcULL;
};

template<class ContainerAllocator>
struct DataType< ::binpacking::LabelPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "binpacking/LabelPoint";
  }

  static const char* value(const ::binpacking::LabelPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::binpacking::LabelPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 z\n"
"string entityName\n"
;
  }

  static const char* value(const ::binpacking::LabelPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::binpacking::LabelPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.entityName);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LabelPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::binpacking::LabelPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::binpacking::LabelPoint_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "entityName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.entityName);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BINPACKING_MESSAGE_LABELPOINT_H
