// Generated by gencpp from file gz_freeze_objects/FreezeModels.msg
// DO NOT EDIT!


#ifndef GZ_FREEZE_OBJECTS_MESSAGE_FREEZEMODELS_H
#define GZ_FREEZE_OBJECTS_MESSAGE_FREEZEMODELS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gz_freeze_objects
{
template <class ContainerAllocator>
struct FreezeModels_
{
  typedef FreezeModels_<ContainerAllocator> Type;

  FreezeModels_()
    : freeze(false)
    , models()  {
    }
  FreezeModels_(const ContainerAllocator& _alloc)
    : freeze(false)
    , models(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _freeze_type;
  _freeze_type freeze;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _models_type;
  _models_type models;





  typedef boost::shared_ptr< ::gz_freeze_objects::FreezeModels_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gz_freeze_objects::FreezeModels_<ContainerAllocator> const> ConstPtr;

}; // struct FreezeModels_

typedef ::gz_freeze_objects::FreezeModels_<std::allocator<void> > FreezeModels;

typedef boost::shared_ptr< ::gz_freeze_objects::FreezeModels > FreezeModelsPtr;
typedef boost::shared_ptr< ::gz_freeze_objects::FreezeModels const> FreezeModelsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gz_freeze_objects::FreezeModels_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gz_freeze_objects::FreezeModels_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gz_freeze_objects::FreezeModels_<ContainerAllocator1> & lhs, const ::gz_freeze_objects::FreezeModels_<ContainerAllocator2> & rhs)
{
  return lhs.freeze == rhs.freeze &&
    lhs.models == rhs.models;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gz_freeze_objects::FreezeModels_<ContainerAllocator1> & lhs, const ::gz_freeze_objects::FreezeModels_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gz_freeze_objects

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gz_freeze_objects::FreezeModels_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gz_freeze_objects::FreezeModels_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gz_freeze_objects::FreezeModels_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gz_freeze_objects::FreezeModels_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gz_freeze_objects::FreezeModels_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gz_freeze_objects::FreezeModels_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gz_freeze_objects::FreezeModels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd3c2b51be5bf4747de89ce8cafd1599";
  }

  static const char* value(const ::gz_freeze_objects::FreezeModels_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd3c2b51be5bf474ULL;
  static const uint64_t static_value2 = 0x7de89ce8cafd1599ULL;
};

template<class ContainerAllocator>
struct DataType< ::gz_freeze_objects::FreezeModels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gz_freeze_objects/FreezeModels";
  }

  static const char* value(const ::gz_freeze_objects::FreezeModels_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gz_freeze_objects::FreezeModels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool freeze\n"
"string[] models\n"
;
  }

  static const char* value(const ::gz_freeze_objects::FreezeModels_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gz_freeze_objects::FreezeModels_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.freeze);
      stream.next(m.models);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FreezeModels_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gz_freeze_objects::FreezeModels_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gz_freeze_objects::FreezeModels_<ContainerAllocator>& v)
  {
    s << indent << "freeze: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.freeze);
    s << indent << "models[]" << std::endl;
    for (size_t i = 0; i < v.models.size(); ++i)
    {
      s << indent << "  models[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.models[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GZ_FREEZE_OBJECTS_MESSAGE_FREEZEMODELS_H
