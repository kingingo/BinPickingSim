// Generated by gencpp from file gz_ray_label_plugin/LabelPoints.msg
// DO NOT EDIT!


#ifndef GZ_RAY_LABEL_PLUGIN_MESSAGE_LABELPOINTS_H
#define GZ_RAY_LABEL_PLUGIN_MESSAGE_LABELPOINTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gz_ray_label_plugin/LabelPoint.h>

namespace gz_ray_label_plugin
{
template <class ContainerAllocator>
struct LabelPoints_
{
  typedef LabelPoints_<ContainerAllocator> Type;

  LabelPoints_()
    : points()
    , scaling(0.0)
    , start_z(0.0)
    , rating(0)
    , showMarker(false)  {
    }
  LabelPoints_(const ContainerAllocator& _alloc)
    : points(_alloc)
    , scaling(0.0)
    , start_z(0.0)
    , rating(0)
    , showMarker(false)  {
  (void)_alloc;
    }



   typedef std::vector< ::gz_ray_label_plugin::LabelPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::gz_ray_label_plugin::LabelPoint_<ContainerAllocator> >> _points_type;
  _points_type points;

   typedef float _scaling_type;
  _scaling_type scaling;

   typedef float _start_z_type;
  _start_z_type start_z;

   typedef int32_t _rating_type;
  _rating_type rating;

   typedef uint8_t _showMarker_type;
  _showMarker_type showMarker;





  typedef boost::shared_ptr< ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator> const> ConstPtr;

}; // struct LabelPoints_

typedef ::gz_ray_label_plugin::LabelPoints_<std::allocator<void> > LabelPoints;

typedef boost::shared_ptr< ::gz_ray_label_plugin::LabelPoints > LabelPointsPtr;
typedef boost::shared_ptr< ::gz_ray_label_plugin::LabelPoints const> LabelPointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator1> & lhs, const ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator2> & rhs)
{
  return lhs.points == rhs.points &&
    lhs.scaling == rhs.scaling &&
    lhs.start_z == rhs.start_z &&
    lhs.rating == rhs.rating &&
    lhs.showMarker == rhs.showMarker;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator1> & lhs, const ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gz_ray_label_plugin

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9b71de3dcafd53b25491b7d106c121a";
  }

  static const char* value(const ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9b71de3dcafd53bULL;
  static const uint64_t static_value2 = 0x25491b7d106c121aULL;
};

template<class ContainerAllocator>
struct DataType< ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gz_ray_label_plugin/LabelPoints";
  }

  static const char* value(const ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LabelPoint[] points\n"
"float32 scaling \n"
"float32 start_z \n"
"int32 rating \n"
"bool showMarker \n"
"================================================================================\n"
"MSG: gz_ray_label_plugin/LabelPoint\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"int32 index\n"
"float64 dist\n"
"string entityName\n"
;
  }

  static const char* value(const ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points);
      stream.next(m.scaling);
      stream.next(m.start_z);
      stream.next(m.rating);
      stream.next(m.showMarker);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LabelPoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gz_ray_label_plugin::LabelPoints_<ContainerAllocator>& v)
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gz_ray_label_plugin::LabelPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "scaling: ";
    Printer<float>::stream(s, indent + "  ", v.scaling);
    s << indent << "start_z: ";
    Printer<float>::stream(s, indent + "  ", v.start_z);
    s << indent << "rating: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rating);
    s << indent << "showMarker: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.showMarker);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GZ_RAY_LABEL_PLUGIN_MESSAGE_LABELPOINTS_H
