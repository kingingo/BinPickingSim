// Generated by gencpp from file contact_republisher/contact_msg.msg
// DO NOT EDIT!


#ifndef CONTACT_REPUBLISHER_MESSAGE_CONTACT_MSG_H
#define CONTACT_REPUBLISHER_MESSAGE_CONTACT_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace contact_republisher
{
template <class ContainerAllocator>
struct contact_msg_
{
  typedef contact_msg_<ContainerAllocator> Type;

  contact_msg_()
    : collision_1()
    , collision_2()
    , normal()
    , position()
    , depth(0.0)  {
      normal.assign(0.0);

      position.assign(0.0);
  }
  contact_msg_(const ContainerAllocator& _alloc)
    : collision_1(_alloc)
    , collision_2(_alloc)
    , normal()
    , position()
    , depth(0.0)  {
  (void)_alloc;
      normal.assign(0.0);

      position.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _collision_1_type;
  _collision_1_type collision_1;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _collision_2_type;
  _collision_2_type collision_2;

   typedef boost::array<float, 3>  _normal_type;
  _normal_type normal;

   typedef boost::array<float, 3>  _position_type;
  _position_type position;

   typedef float _depth_type;
  _depth_type depth;





  typedef boost::shared_ptr< ::contact_republisher::contact_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::contact_republisher::contact_msg_<ContainerAllocator> const> ConstPtr;

}; // struct contact_msg_

typedef ::contact_republisher::contact_msg_<std::allocator<void> > contact_msg;

typedef boost::shared_ptr< ::contact_republisher::contact_msg > contact_msgPtr;
typedef boost::shared_ptr< ::contact_republisher::contact_msg const> contact_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::contact_republisher::contact_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::contact_republisher::contact_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::contact_republisher::contact_msg_<ContainerAllocator1> & lhs, const ::contact_republisher::contact_msg_<ContainerAllocator2> & rhs)
{
  return lhs.collision_1 == rhs.collision_1 &&
    lhs.collision_2 == rhs.collision_2 &&
    lhs.normal == rhs.normal &&
    lhs.position == rhs.position &&
    lhs.depth == rhs.depth;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::contact_republisher::contact_msg_<ContainerAllocator1> & lhs, const ::contact_republisher::contact_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace contact_republisher

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::contact_republisher::contact_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::contact_republisher::contact_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::contact_republisher::contact_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::contact_republisher::contact_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::contact_republisher::contact_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::contact_republisher::contact_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::contact_republisher::contact_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "49e516f92ecaa35a5d84ba7de7d39aa2";
  }

  static const char* value(const ::contact_republisher::contact_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x49e516f92ecaa35aULL;
  static const uint64_t static_value2 = 0x5d84ba7de7d39aa2ULL;
};

template<class ContainerAllocator>
struct DataType< ::contact_republisher::contact_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "contact_republisher/contact_msg";
  }

  static const char* value(const ::contact_republisher::contact_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::contact_republisher::contact_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string collision_1\n"
"string collision_2\n"
"float32[3] normal\n"
"float32[3] position\n"
"float32 depth\n"
;
  }

  static const char* value(const ::contact_republisher::contact_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::contact_republisher::contact_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.collision_1);
      stream.next(m.collision_2);
      stream.next(m.normal);
      stream.next(m.position);
      stream.next(m.depth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct contact_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::contact_republisher::contact_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::contact_republisher::contact_msg_<ContainerAllocator>& v)
  {
    s << indent << "collision_1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.collision_1);
    s << indent << "collision_2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.collision_2);
    s << indent << "normal[]" << std::endl;
    for (size_t i = 0; i < v.normal.size(); ++i)
    {
      s << indent << "  normal[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.normal[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "depth: ";
    Printer<float>::stream(s, indent + "  ", v.depth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTACT_REPUBLISHER_MESSAGE_CONTACT_MSG_H
