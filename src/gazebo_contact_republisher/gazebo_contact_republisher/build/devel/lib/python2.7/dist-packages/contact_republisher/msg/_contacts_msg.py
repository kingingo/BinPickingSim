# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from contact_republisher/contacts_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import contact_republisher.msg

class contacts_msg(genpy.Message):
  _md5sum = "86961c1410790d81e56871bf92da4561"
  _type = "contact_republisher/contacts_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """contact_msg[] contacts
================================================================================
MSG: contact_republisher/contact_msg
string collision_1
string collision_2
float32[3] normal
float32[3] position
float32 depth"""
  __slots__ = ['contacts']
  _slot_types = ['contact_republisher/contact_msg[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       contacts

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(contacts_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.contacts is None:
        self.contacts = []
    else:
      self.contacts = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.contacts)
      buff.write(_struct_I.pack(length))
      for val1 in self.contacts:
        _x = val1.collision_1
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.collision_2
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        buff.write(_get_struct_3f().pack(*val1.normal))
        buff.write(_get_struct_3f().pack(*val1.position))
        _x = val1.depth
        buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.contacts is None:
        self.contacts = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contacts = []
      for i in range(0, length):
        val1 = contact_republisher.msg.contact_msg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.collision_1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.collision_1 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.collision_2 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.collision_2 = str[start:end]
        start = end
        end += 12
        val1.normal = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 12
        val1.position = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (val1.depth,) = _get_struct_f().unpack(str[start:end])
        self.contacts.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.contacts)
      buff.write(_struct_I.pack(length))
      for val1 in self.contacts:
        _x = val1.collision_1
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.collision_2
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        buff.write(val1.normal.tostring())
        buff.write(val1.position.tostring())
        _x = val1.depth
        buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.contacts is None:
        self.contacts = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contacts = []
      for i in range(0, length):
        val1 = contact_republisher.msg.contact_msg()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.collision_1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.collision_1 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.collision_2 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.collision_2 = str[start:end]
        start = end
        end += 12
        val1.normal = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
        start = end
        end += 12
        val1.position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
        start = end
        end += 4
        (val1.depth,) = _get_struct_f().unpack(str[start:end])
        self.contacts.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
